#!/usr/bin/env python3
# -*- coding: utf-8 -*-

'异步IO的练习'

__author__ = 'Jacklee'

"""
	在学习异步IO前需要先明确几个基本的概念并能够理解
	1. 同步IO
	2. 异步IO
	3. 阻塞IO
	4. 非阻塞IO

	***************
	解释1
	同步: 发出一个功能调用时，在没有得到结果前，该调用不返回。按照调用顺序一步步来处理。
	阻塞: 调用结果返回前，当前线程挂起(进入非可执行状态, CPU不会给线程分配时间片，线程暂停运行）

	区别: 同步调用当前线程是激活状态, 逻辑上没有返回而已。
    同步，就是调用一个功能，该功能没有结束前，一直等结果。
	异步，就是调用一个功能，不需要知道该功能结果，该功能有结果后通知（回调通知）
	阻塞，就是调用（函数），（函数）没有接收完数据或者没有得到结果之前，不会返回。
	非阻塞，就是调用（函数），（函数）立即返回，通过select通知调用者。
	同步IO和异步IO的区别就在于：数据拷贝的时候进程是否阻塞！
	阻塞IO和非阻塞IO的区别就在于：应用程序的调用是否立即返回！

	***************
	解释2
	老张爱喝茶，废话不说，煮开水。
	出场人物: 老张，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。
	1. 老张把水壶放到火上, 立等水开(同步阻塞)
	2. 老张把水壶放到火上, 去客厅看电视, 时不时去厨房看看水开没有(同步非阻塞)
	3. 老张把响水壶放到火上, 立等水开(异步阻塞)
	4. 老张把响水壶放到火上, 去客厅看电视, 水壶响之前不再去看它了, 响了再去拿壶(异步非阻塞)
	重点
	所谓同步异步, 仅仅对于水壶而言. 普通水壶: 同步; 响水壶: 异步
	虽然都能干活, 但响水壶可以在自己完工之后, 提示老张水开了. 这是普通水壶所不能及的(具备的能力不同)
	同步只能让调用者去轮询自己(情况2中), 造成老张效率的低下

	所谓阻塞非阻塞, 仅仅对于老张而言. 立等的老张: 阻塞; 看电视的老张: 非阻塞
	情况1和情况3中老张就是阻塞的, 媳妇喊他都不知道. 虽然3中响水壶是异步的, 可对于立等的老张没有太大的意义
	所以一般异步是配合非阻塞使用的, 这样才能发挥异步的效用

	***************
	个人理解
	两个不同维度的东西, 之间没有类比关系
	同步/异步: 是功能(代码段/函数)的实现方式. 具备异步的功能就是异步. 是确定的不能改变
	阻塞/非阻塞: 是指调度功能的方式. 不管功能是同步还是异步, 调度都可以选择阻塞/非阻塞. 是自由的可以选择
	当然了, 最优的选择是异步非阻塞方式.


	Python的异步IO学习知识点包含以下
	1. 协程(Coroutine) 又称为微线程
	   生成器函数
	   receive = yield value
	   send()
	   close()
	   需要自己去调度, 不过也是最基础的
	2. @asyncio.coroutine
	   yield from
	3. async/await
	   替代asyncio/yield from
	   
	4. aiohttp










"""
